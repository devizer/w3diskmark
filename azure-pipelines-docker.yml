variables:
  THEWORKDIR: /transient-builds
  DEFAULT_NEWSIZE: 16G
  XZ_COMPRESSION_LEVEL: 9

jobs:

- job: Snapping
  pool:
    vmImage: '$(PIPELINEIMAGE)'
  timeoutInMinutes: 120
  strategy:
    maxParallel: 4
    matrix:
      
      'classic 18.04':
        CONFINEMENT: classic
        PIPELINEIMAGE: ubuntu-22.04
        SNAPIMAGE: 18.04
        BASECORE: 18
        SNAPCRAFTVER: 7.x/stable
      'strict 18.04':
        CONFINEMENT: strict
        PIPELINEIMAGE: ubuntu-22.04
        SNAPIMAGE: 18.04
        BASECORE: 18
        SNAPCRAFTVER: 7.x/stable

      'classic 20.04':
        CONFINEMENT: classic
        PIPELINEIMAGE: ubuntu-22.04
        SNAPIMAGE: 20.04
        BASECORE: 20
        SNAPCRAFTVER: stable
      'strict 20.04':
        CONFINEMENT: strict
        PIPELINEIMAGE: ubuntu-22.04
        SNAPIMAGE: 20.04
        BASECORE: 20
        SNAPCRAFTVER: stable
      'classic 22.04':
        CONFINEMENT: classic
        PIPELINEIMAGE: ubuntu-22.04
        SNAPIMAGE: 22.04
        BASECORE: 22
        SNAPCRAFTVER: stable
      'strict 22.04':
        CONFINEMENT: strict
        PIPELINEIMAGE: ubuntu-20.04
        SNAPIMAGE: 22.04
        BASECORE: 22
        SNAPCRAFTVER: stable

  steps:
  - script: |
      set -eu; set -o pipefail
      script=https://raw.githubusercontent.com/devizer/test-and-build/master/install-build-tools-bundle.sh; (wget -q -nv --no-check-certificate -O - $script 2>/dev/null || curl -ksSL $script) | bash >/dev/null
      Say --Reset-Stopwatch
      echo "CPU: $(Get-CpuName)"
      printenv | sort;
    displayName: 'Variables'

  - script: |
      set -eu; set -o pipefail
      echo "CPU: $(Get-CpuName)"
      sudo apt-get update -qq
      # time sudo snap install multipass
      # time sudo snap install snapcraft --channel=8.x/stable --classic
    displayName: 'Provisioning'

  - script: |
      set -eu; set -o pipefail
      echo "CPU: $(Get-CpuName)"
      pushd Snapcraft-In-Docker
      time docker build . -t snapcraft-image --build-arg RISK="$SNAPCRAFTVER" --build-arg UBUNTU=${SNAPIMAGE} # bionic
      popd

      Say "IMAGES"
      docker image ls
      Say "SNAPCRAFT VERSION"
      docker run --rm -t -v "$PWD":/build -w /build snapcraft-image snapcraft --version
    displayName: 'Build snapcraft image'

  - script: |
      set -eu; set -o pipefail
      echo "CPU: $(Get-CpuName)"
      Say --Reset-Stopwatch
      cd snap-source
      bash -e download-binaries.sh
      bash -e patch-snapcraft.sh "snap/snapcraft.yaml" "base" "core${BASECORE}"
      chmod +x snap/hooks/configure
      chmod +x w3diskmark
      ver=$(cat bin-x64/VERSION); 
      bash -e patch-snapcraft.sh "snap/snapcraft.yaml" "version" "$ver"
      bash -e patch-snapcraft.sh "snap/snapcraft.yaml" "confinement" "$CONFINEMENT"
      docker run --privileged -t -w /builder -v $(pwd):/builder --name w3diskmak-builder-2 --hostname w3diskmak-builder-2 --rm -v /sys/fs/cgroup:/sys/fs/cgroup:ro snapcraft-image \
                 snapcraft --destructive-mode
      ls -lah
    displayName: 'Build in Docker'

  - script: |
      set -eu; set -o pipefail
      echo "CPU: $(Get-CpuName)"
      Say --Reset-Stopwatch
      cd snap-source

      UBUNTU_VER=20.04
      image=devizervlad/systemd-on-ubuntu:${UBUNTU_VER}
      try-and-retry docker pull -q $image
      Say "Starting container from $image"
      docker run --privileged -t -d -v $(pwd):/builder --name w3diskmak-builder --hostname w3diskmak-builder --rm -v /sys/fs/cgroup:/sys/fs/cgroup:ro $image

      # make sure SystemD is completely loaded, usually it takes about 1 second
      wait_for_systemd="printf 'Wait for systemd on ubuntu "$UBUNTU_VER" '; ok=''; for i in {1..9}; do pgrep systemd-journal >/dev/null && ok='true' && echo ' OK' && break || printf '.'; sleep 1; done; [ -z \$ok ] && echo ' Fail';"
      docker exec -t w3diskmak-builder bash -c "$wait_for_systemd" || true; 

      # last, SystemD initialization is completed and we can install, start, check the status and read logs of a SystemD service
      # for illustration purposes we just display the full SystemD's journal
      sleep 1
      Say "Container boot log"
      docker exec w3diskmak-builder bash -c "journalctl -b";

      # sudo docker run -v $(pwd):/builder --name w3diskmak-builder --hostname w3diskmak-builder -d ubuntu:20.04 tail -f /dev/null
      docker exec -t w3diskmak-builder bash -c 'set -eu; set -o pipefail
         cd /builder
         apt-get update -qq; apt-get install curl snapcraft xz-utils sudo -y -qq | grep "Setting\|Unpack";
         script=https://raw.githubusercontent.com/devizer/test-and-build/master/install-build-tools-bundle.sh; (wget -q -nv --no-check-certificate -O - $script 2>/dev/null || curl -ksSL $script) | bash >/dev/null
         bash -e download-binaries.sh # need for VERSION file only
         bash -e build-snap.sh
      '
    condition: eq(1,42)
    displayName: 'Build in Docker (Crzy)'

  - script: |
      set -eu; set -o pipefail
      echo "CPU: $(Get-CpuName)"
      Say --Reset-Stopwatch
      cd snap-source

      classicArg="--devmode"; test "$CONFINEMENT" = "classic" && classicArg="--dangerous --classic"
      Say "INSTALL ARGUMENTS: [$classicArg]"
      time sudo snap install w3diskmark*.snap $classicArg
      time sudo snap set w3diskmark http.port=5555
      time sudo snap restart w3diskmark 
      # bash -c w3diskmark &
      nohup sudo snap logs -f w3diskmark &
      sleep 33
      Say "ALL THE PROCESSES"
      sudo ps -aux
      Say "SNAP PROCESSES"
      sudo ps -aux | grep Universe
      Say "SNAP SERVICES"
      sudo snap services
      curl -I http://localhost:5555
    displayName: 'Smoke Test'

  - script: |
      set -eu; set -o pipefail
      echo "CPU: $(Get-CpuName)"
      time sudo snap logs -n=all w3diskmark.service |& tee $SYSTEM_ARTIFACTSDIRECTORY/w3diskmark.service.log
    displayName: 'Snap Daemon Logs'

  - script: |
      set -eu; set -o pipefail
      echo "CPU: $(Get-CpuName)"
      Say --Reset-Stopwatch
      sudo chown -R $USER $HOME
      find $HOME -name '*.log' -exec cp -v -f {} $SYSTEM_ARTIFACTSDIRECTORY \;

      cd snap-source

      for f in $(ls -1 *.snap); do
        # cat $f | xz -z -1 > $SYSTEM_ARTIFACTSDIRECTORY/$f.xz
        cp -v $f $SYSTEM_ARTIFACTSDIRECTORY/
      done


    condition: succeededOrFailed()
    displayName: 'Compress artifact image'

  - task: PublishBuildArtifacts@1
    condition: succeeded()
    displayName: 'Publish Final'
    inputs:
      pathtoPublish: '$(System.ARTIFACTSDIRECTORY)'
      artifactName: 'Succeeded $(Agent.JobName)'

  - task: PublishBuildArtifacts@1
    condition: failed()
    displayName: 'Publish Errors'
    inputs:
      pathtoPublish: '$(System.ARTIFACTSDIRECTORY)'
      artifactName: 'Failed $(Agent.JobName)-$(Build.BUILDNUMBER)'
